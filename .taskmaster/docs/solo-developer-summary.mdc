---
description: 
globs: 
alwaysApply: false
---
# Farm Management System - Solo Developer Guide

## üìã ‡∏™‡∏£‡∏∏‡∏õ Stack & Architecture

### ‚úÖ **Tech Stack (Excellent Choices!)**
- **Frontend**: Next.js 15.3.4 App Router
- **UI**: DaisyUI + TailwindCSS 4 with "jaothui" theme
- **Database**: Supabase PostgreSQL
- **Auth**: Supabase Auth
- **ORM**: Prisma
- **Animation**: Framer Motion
- **Notifications**: Sonner
- **Forms**: React Hook Form + Zod
- **Testing**: Jest + React Testing Library
- **File Naming**: kebab-case.tsx

---

## üéØ Why This Stack is Perfect for Solo Developer

### **‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏´‡∏•‡∏±‡∏Å**
1. **All-in-One Solutions**: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á frontend/backend
2. **Zero Server Management**: Supabase ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ database + auth
3. **Type Safety**: TypeScript + Prisma + Zod ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô runtime errors
4. **Rapid Development**: DaisyUI components ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ
5. **Easy Testing**: Jest setup ‡∏á‡πà‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
6. **Modern Tooling**: Hot reload, built-in optimization

### **‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Solo Developer ‡πÄ‡∏û‡∏£‡∏≤‡∏∞**
- ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô setup ‡πÅ‡∏•‡∏∞ configuration
- Documentation ‡∏î‡∏µ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏á‡πà‡∏≤‡∏¢
- Community support ‡πÉ‡∏´‡∏ç‡πà
- Scalable ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà over-engineering

---

## üìÅ Project Structure

```
farm-management-full-stack/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ app/                    # Next.js App Router (‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ (auth)/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login/page.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ register/page.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dashboard/[farm-id]/page.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ animals/[id]/page.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ profile/page.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx            # ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å (Welcome)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ components/             # Components ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° feature
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ui/                # Base UI components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ farm/              # Farm-related components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ animals/           # Animal-related components
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ auth/              # Auth components
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ lib/                   # Utilities & configs
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ supabase.ts        # Supabase clients
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ prisma.ts          # Prisma client
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validations.ts     # Zod schemas
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils.ts           # Helper functions
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ hooks/                 # Custom React hooks
‚îÇ   ‚îú‚îÄ‚îÄ types/                 # TypeScript type definitions  
‚îÇ   ‚îî‚îÄ‚îÄ actions/               # Server Actions
‚îÇ
‚îú‚îÄ‚îÄ prisma/
‚îÇ   ‚îú‚îÄ‚îÄ schema.prisma          # Database schema
‚îÇ   ‚îî‚îÄ‚îÄ seed.ts               # Database seeding
‚îÇ
‚îú‚îÄ‚îÄ __tests__/                # Testing files
‚îú‚îÄ‚îÄ .taskmaster/              # Project documentation
‚îÇ   ‚îî‚îÄ‚îÄ docs/
‚îÇ       ‚îú‚îÄ‚îÄ database_schema.mdc
‚îÇ       ‚îú‚îÄ‚îÄ ui_*.json         # UI layouts
‚îÇ       ‚îú‚îÄ‚îÄ style-guide.mdc
‚îÇ       ‚îî‚îÄ‚îÄ *.mdc            # Various docs
‚îÇ
‚îî‚îÄ‚îÄ Configuration files...
```

---

## üöÄ Getting Started

### 1. **Setup Dependencies**
```bash
# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡πÉ‡∏´‡∏°‡πà
npm install @supabase/supabase-js @supabase/auth-helpers-nextjs @prisma/client daisyui framer-motion sonner react-hook-form zod @hookform/resolvers date-fns date-fns-tz lucide-react @tanstack/react-query next-cloudinary @tailwindcss/typography

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dev dependencies
npm install -D prisma @testing-library/react @testing-library/jest-dom @testing-library/user-event jest jest-environment-jsdom prettier prettier-plugin-tailwindcss @types/jest
```

### 2. **Create Configuration Files**
Copy configurations ‡∏à‡∏≤‡∏Å [configuration-files.mdc](mdc:.taskmaster/docs/configuration-files.mdc):
- `jest.config.js` + `jest.setup.js`
- `tailwind.config.ts` (with jaothui theme)
- `.prettierrc` + `.prettierignore`
- `.eslintrc.json`
- Enhanced `tsconfig.json`
- `.env.example` + `.env.local`
- `.vscode/settings.json` + `.vscode/extensions.json`

### 3. **Setup Database**
```bash
# ‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase project ‡πÅ‡∏•‡∏∞ copy schema ‡∏à‡∏≤‡∏Å database_schema.mdc
npx prisma init
npx prisma db push
npx prisma generate
```

### 4. **Environment Variables**
‡∏™‡∏£‡πâ‡∏≤‡∏á `.env.local` ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Supabase project:
```bash
NEXT_PUBLIC_SUPABASE_URL=your_project_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
DATABASE_URL=your_database_url
```

---

## üé® UI Implementation Guide

### **Design System**
- **Theme**: "jaothui" (‡∏™‡∏µ‡∏ó‡∏≠‡∏á #D4AF37)
- **Fonts**: Inter + Sarabun (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
- **Components**: DaisyUI pre-built components
- **Layout**: Mobile-first responsive design

### **UI References**
‡πÉ‡∏ä‡πâ UI layout files ‡πÉ‡∏ô `.taskmaster/docs/`:
- [ui_home_layout.json](mdc:.taskmaster/docs/ui_home_layout.json) - ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
- [ui_login_layout.json](mdc:.taskmaster/docs/ui_login_layout.json) - ‡∏´‡∏ô‡πâ‡∏≤ Login
- [ui_register_layout.json](mdc:.taskmaster/docs/ui_register_layout.json) - ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
- [ui_profile_layout.json](mdc:.taskmaster/docs/ui_profile_layout.json) - ‡∏´‡∏ô‡πâ‡∏≤ Profile
- [ui_dashboard_layout.json](mdc:.taskmaster/docs/ui_dashboard_layout.json) - ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
- [ui_animal_detail_layout.json](mdc:.taskmaster/docs/ui_animal_detail_layout.json) - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡∏ï‡∏ß‡πå
- [ui_animal_create_layout.json](mdc:.taskmaster/docs/ui_animal_create_layout.json) - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÉ‡∏´‡∏°‡πà
- [ui_activity_detail_layout.json](mdc:.taskmaster/docs/ui_activity_detail_layout.json) - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
- [ui_success_error_layout.json](mdc:.taskmaster/docs/ui_success_error_layout.json) - ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

---

## üíæ Database Design

### **Core Models**
- **Profile**: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö Supabase Auth)
- **Farm**: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°
- **Animal**: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå (10 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)
- **Activity**: ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°/‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
- **FarmInvitation**: ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ü‡∏≤‡∏£‡πå‡∏°

### **Business Rules**
- ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÑ‡∏î‡πâ 1 ‡∏ü‡∏≤‡∏£‡πå‡∏°
- ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ 1 ‡∏ü‡∏≤‡∏£‡πå‡∏°
- ‡∏°‡∏µ‡∏Å‡∏≤‡∏£ RLS (Row Level Security) ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô

‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô [database_schema.mdc](mdc:.taskmaster/docs/database_schema.mdc)

---

## üß™ Testing Strategy

### **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà**
1. **Component Tests**: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö components ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
2. **Integration Tests**: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö user flows ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
3. **E2E Tests**: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≠‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô

### **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Test**
```typescript
// __tests__/components/animal-card.test.tsx
import { render, screen } from '@testing-library/react'
import { AnimalCard } from '@/components/animal-card'

describe('AnimalCard', () => {
  it('should display animal information', () => {
    const mockAnimal = {
      id: '1',
      name: '‡∏ô‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏π',
      animalType: '‡∏´‡∏°‡∏π',
    }
    
    render(<AnimalCard animal={mockAnimal} />)
    expect(screen.getByText('‡∏ô‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏π')).toBeInTheDocument()
  })
})
```

---

## üìà Development Workflow

### **Phase 1: Foundation (Week 1-2)**
1. ‚úÖ Setup project structure
2. ‚úÖ Configure all tools
3. üîÑ **Next**: Implement authentication
4. üîÑ **Next**: Create base components

### **Phase 2: Core Features (Week 3-4)**
1. Farm management (CRUD)
2. Animal management (CRUD)  
3. Basic dashboard
4. File uploads for animal photos

### **Phase 3: Advanced Features (Week 5-6)**
1. Activity scheduling system
2. Real-time notifications
3. Farm member invitations
4. Mobile responsiveness

### **Phase 4: Polish (Week 7-8)**
1. Testing coverage
2. Performance optimization
3. Error handling & loading states
4. Documentation

---

## üõ†Ô∏è Solo Developer Best Practices

### **‚úÖ DO**
- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å MVP features ‡∏Å‡πà‡∏≠‡∏ô
- ‡πÉ‡∏ä‡πâ TypeScript strict mode
- ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô tests ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö critical user flows
- ‡πÉ‡∏ä‡πâ Server Actions ‡πÅ‡∏ó‡∏ô API routes
- ‡πÉ‡∏ä‡πâ DaisyUI components ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß
- Document decisions ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç

### **‚ùå DON'T**
- Over-engineer ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å
- ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô custom components ‡∏ñ‡πâ‡∏≤ DaisyUI ‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß
- Optimize prematurely  
- ‡∏•‡∏∞‡πÄ‡∏•‡∏¢ error handling
- ‡∏ó‡∏≥ features ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô MVP

---

## üöÄ Quick Start Commands

### **Development**
```bash
npm run dev          # Start development server
npm run test         # Run tests
npm run test:watch   # Run tests in watch mode
npm run lint         # Check code quality
npm run format       # Format code
```

### **Database**
```bash
npm run db:generate  # Generate Prisma client
npm run db:push      # Push schema to database
npm run db:studio    # Open Prisma Studio
```

### **Production**
```bash
npm run build-check  # Type check + lint + test
npm run build        # Build for production
npm start            # Start production server
```

---

## üìö Key Resources

### **Documentation**
- [Tech Stack Recommendations](mdc:.taskmaster/docs/tech-stack-recommendations.mdc)
- [Configuration Files](mdc:.taskmaster/docs/configuration-files.mdc)
- [Database Schema](mdc:.taskmaster/docs/database_schema.mdc)
- [Style Guide](mdc:.taskmaster/docs/style-guide.mdc)

### **UI Layouts**
- ‡πÉ‡∏ä‡πâ JSON files ‡πÉ‡∏ô `.taskmaster/docs/ui_*.json`
- ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ component structure, styling, ‡πÅ‡∏•‡∏∞ behavior

### **External Resources**
- [Next.js 15 Docs](mdc:https:/nextjs.org/docs)
- [DaisyUI Components](mdc:https:/daisyui.com/components)
- [Supabase Docs](mdc:https:/supabase.com/docs)
- [Prisma Docs](mdc:https:/www.prisma.io/docs)

---

## üéØ Success Metrics

### **Week 2**: Foundation Complete
- [ ] All dependencies installed
- [ ] Authentication working
- [ ] Basic pages routing
- [ ] Database schema deployed

### **Week 4**: MVP Features
- [ ] User can create/manage farm
- [ ] User can add/edit animals
- [ ] Basic dashboard functional
- [ ] Photo uploads working

### **Week 6**: Advanced Features
- [ ] Activity scheduling
- [ ] Real-time notifications
- [ ] Farm invitations working
- [ ] Mobile responsive

### **Week 8**: Production Ready
- [ ] Error handling complete
- [ ] Testing coverage >70%
- [ ] Performance optimized
- [ ] Documentation complete

---

## üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

Stack ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤**‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö solo developer**! ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ:

1. **‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏£‡πá‡∏ß**: DaisyUI + Next.js App Router
2. **Maintain ‡∏á‡πà‡∏≤‡∏¢**: TypeScript + Prisma + Zod
3. **Scale ‡πÑ‡∏î‡πâ**: Supabase + modern architecture
4. **Debug ‡∏á‡πà‡∏≤‡∏¢**: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô

‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å MVP ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏° features ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏¥‡∏á

**‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô! üöÄ**
