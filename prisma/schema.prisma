generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id               String       @id @default(uuid())
  firstName        String?
  lastName         String?
  phoneNumber      String       @unique
  profileImage     String?      @map("profile_image")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  phoneVerified    Boolean      @default(false) @map("phone_verified")
  verified         Boolean      @default(false)
  email            String?      @unique
  emailVerified    Boolean      @default(false) @map("email_verified")
  passwordHash     String       @map("password_hash")
  resetToken       String?      @map("reset_token")
  resetTokenExpiry DateTime?    @map("reset_token_expiry")
  memberOfFarms    FarmMember[]
  ownedFarms       Farm[]       @relation("FarmOwner")

  @@map("profiles")
}

model Farm {
  id          String       @id @default(uuid())
  name        String
  province    String
  size        Float?       // ขนาดพื้นที่ในไร่
  cropTypes   String[]     @default([]) @map("crop_types") // ประเภทพืชที่ปลูก
  description String?      // รายละเอียดเพิ่มเติม
  ownerId     String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  animals     Animal[]
  members     FarmMember[]
  owner       Profile      @relation("FarmOwner", fields: [ownerId], references: [id])

  @@map("farms")
}

model FarmMember {
  profileId String
  farmId    String
  farm      Farm    @relation(fields: [farmId], references: [id])
  profile   Profile @relation(fields: [profileId], references: [id])

  @@id([profileId, farmId])
  @@map("farm_members")
}

model Animal {
  id                String             @id @default(uuid())
  name              String
  animalType        String             @map("animal_type")
  microchip         String?
  birthDate         DateTime?          @map("birth_date")
  weight            Float?
  height            Float?
  color             String?
  fatherName        String?            @map("father_name")
  motherName        String?            @map("mother_name")
  image             String?
  farmId            String
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  activities        Activity[]
  activitySchedules ActivitySchedule[]
  farm              Farm               @relation(fields: [farmId], references: [id])

  @@map("animals")
}

model Activity {
  id           String         @id @default(uuid())
  title        String
  description  String?
  notes        String?
  activityDate DateTime       @map("activity_date")
  status       ActivityStatus
  animalId     String
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  animal       Animal         @relation(fields: [animalId], references: [id])

  @@map("activities")
}

model ActivitySchedule {
  id             String         @id @default(uuid())
  title          String
  description    String?
  notes          String?
  scheduledDate  DateTime       @map("scheduled_date")
  status         ActivityStatus
  isRecurring    Boolean        @default(false) @map("is_recurring")
  recurrenceType String?        @map("recurrence_type")
  animalId       String
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  animal         Animal         @relation(fields: [animalId], references: [id])

  @@map("activity_schedules")
}

enum ActivityStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
