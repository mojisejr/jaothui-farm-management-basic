generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id               String       @id @default(uuid())
  firstName        String?
  lastName         String?
  phoneNumber      String       @unique
  profileImage     String?      @map("profile_image")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  phoneVerified    Boolean      @default(false) @map("phone_verified")
  verified         Boolean      @default(false)
  email            String?      @unique
  emailVerified    Boolean      @default(false) @map("email_verified")
  passwordHash     String       @map("password_hash")
  resetToken       String?      @map("reset_token")
  resetTokenExpiry DateTime?    @map("reset_token_expiry")
  memberOfFarms          FarmMember[]
  ownedFarms             Farm[]                     @relation("FarmOwner")
  sentInvitations        Invitation[]               @relation("InviterInvitations")
  notifications          Notification[]
  notificationPreferences NotificationPreferences?
  pushSubscriptions      PushSubscription[]

  @@map("profiles")
}

model Farm {
  id          String       @id @default(uuid())
  name        String
  province    String
  size        Float?       // ขนาดพื้นที่ในไร่
  description String?      // รายละเอียดเพิ่มเติม
  ownerId     String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  animals       Animal[]
  members       FarmMember[]
  owner         Profile        @relation("FarmOwner", fields: [ownerId], references: [id])
  invitations   Invitation[]
  notifications Notification[]

  @@map("farms")
}

enum FarmRole {
  OWNER
  MEMBER
}

model FarmMember {
  profileId String
  farmId    String
  farm      Farm    @relation(fields: [farmId], references: [id])
  profile   Profile @relation(fields: [profileId], references: [id])
  role      FarmRole @default(MEMBER)

  @@id([profileId, farmId])
  @@map("farm_members")
}

model AnimalType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  animals     Animal[]

  @@map("animal_types")
}

model Animal {
  id                String             @id @default(uuid())
  name              String
  animalTypeId      String             @map("animal_type_id")
  animalType        AnimalType         @relation(fields: [animalTypeId], references: [id])
  microchip         String?
  birthDate         DateTime?          @map("birth_date")
  weight            Float?
  height            Float?
  color             String?
  fatherName        String?            @map("father_name")
  motherName        String?            @map("mother_name")
  notes             String?
  photoUrl          String?            @map("photo_url")
  image             String?
  farmId            String
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  activities        Activity[]
  activitySchedules ActivitySchedule[]
  farm              Farm               @relation(fields: [farmId], references: [id])

  @@map("animals")
}

model Activity {
  id           String         @id @default(uuid())
  title        String
  description  String?
  notes        String?
  activityDate DateTime       @map("activity_date")
  status       ActivityStatus
  animalId     String
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  animal       Animal         @relation(fields: [animalId], references: [id])

  @@map("activities")
}

model ActivitySchedule {
  id             String         @id @default(uuid())
  title          String
  description    String?
  notes          String?
  scheduledDate  DateTime       @map("scheduled_date")
  status         ActivityStatus
  isRecurring    Boolean        @default(false) @map("is_recurring")
  recurrenceType String?        @map("recurrence_type")
  animalId       String
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  animal         Animal         @relation(fields: [animalId], references: [id])

  @@map("activity_schedules")
}

enum ActivityStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Invitation {
  id          String   @id @default(uuid())
  farmId      String
  phoneNumber String
  inviterId   String
  token       String   @unique
  status      InviteStatus @default(PENDING)
  expiresAt   DateTime
  createdAt   DateTime @default(now()) @map("created_at")
  farm        Farm     @relation(fields: [farmId], references: [id])
  inviter     Profile  @relation("InviterInvitations", fields: [inviterId], references: [id])

  @@map("invitations")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

model Notification {
  id                String               @id @default(uuid())
  userId            String               @map("user_id")
  type              NotificationType
  title             String
  message           String
  data              Json?                // Additional data for the notification
  isRead            Boolean              @default(false) @map("is_read")
  priority          NotificationPriority @default(NORMAL)
  createdAt         DateTime             @default(now()) @map("created_at")
  scheduledAt       DateTime?            @map("scheduled_at") // For future notifications
  farmId            String?              @map("farm_id")
  relatedEntityType String?              @map("related_entity_type") // 'activity', 'schedule', 'animal', etc.
  relatedEntityId   String?              @map("related_entity_id")

  // Relations
  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  farm Farm?   @relation(fields: [farmId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([userId]) // Query notifications by user
  @@index([farmId]) // Query notifications by farm  
  @@index([scheduledAt]) // Query scheduled notifications
  @@index([createdAt]) // Order notifications by creation time
  @@index([isRead]) // Filter read/unread notifications
  @@index([type]) // Filter by notification type
  @@index([priority]) // Filter by priority
  @@map("notifications")
}

model NotificationPreferences {
  id                    String  @id @default(uuid())
  userId                String  @unique @map("user_id")
  activityReminders     Boolean @default(true) @map("activity_reminders")
  overdueAlerts         Boolean @default(true) @map("overdue_alerts")
  farmInvitations       Boolean @default(true) @map("farm_invitations")
  memberJoined          Boolean @default(true) @map("member_joined")
  newActivities         Boolean @default(true) @map("new_activities")
  pushEnabled           Boolean @default(false) @map("push_enabled")
  emailEnabled          Boolean @default(false) @map("email_enabled")
  reminderFrequency     Int     @default(30) @map("reminder_frequency") // minutes before activity
  quietHoursStart       String? @map("quiet_hours_start") // "22:00"
  quietHoursEnd         String? @map("quiet_hours_end")   // "07:00"
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  endpoint  String
  p256dhKey String   @map("p256dh_key")
  authKey   String   @map("auth_key")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("push_subscriptions")
}

enum NotificationType {
  ACTIVITY_REMINDER     // Activity due soon
  ACTIVITY_OVERDUE      // Activity is overdue
  SCHEDULE_REMINDER     // Scheduled activity coming up
  FARM_INVITATION       // Invited to join farm
  MEMBER_JOINED         // New member joined farm
  ACTIVITY_COMPLETED    // Activity marked complete by other member
  ACTIVITY_CREATED      // New activity created by other member
  SYSTEM_ANNOUNCEMENT   // System-wide announcements
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
